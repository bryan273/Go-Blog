variables:
 JDBC_DATABASE_URL_PRODUCTION: $JDBC_DATABASE_URL_PRODUCTION
 POSTGRES_PORT: $JDBC_DATABASE_PORT
 POSTGRES_USER: $JDBC_DATABASE_USERNAME
 POSTGRES_PASSWORD: $JDBC_DATABASE_PASSWORD
 REGISTRY_USER: $REGISTRY_USER
 IMAGE_NAME: $IMAGE_NAME
 IMAGE_TAG: $IMAGE_TAG
 CONTAINER_NAME: $CONTAINER_NAME
 GCP_USERNAME: $GCP_USERNAME
 GCP_STATIC_IP: $GCP_STATIC_IP
 API_KEY: $API_KEY
 AUTH_SERVICE_BASE_URL: $AUTH_SERVICE_BASE_URL
 SONAR_HOST_URL: $SONAR_HOST_URL
 SONAR_PROJECT_KEY: $SONAR_PROJECT_KEY
 SONAR_LOGIN_TOKEN: $SONAR_LOGIN_TOKEN
 


stages:
 - build
 - test
 - analyze
 - publish
 - deploy




Build:
 stage: build
 image: gradle:jdk17-alpine
 before_script:
   - echo `pwd`
   - export GRADLE_USER_HOME=`pwd`/.gradle
 script:
   - gradle wrapper
   - ./gradlew assemble
   - ls
 artifacts:
   when: always
   paths:
     - build/libs/*.jar
   expire_in: 1 week




Test:
  stage: test
  image: gradle:jdk17-alpine
  dependencies:
    - Build
  services:
    - "postgres:latest"
  before_script:
    - echo `pwd`
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - export SPRING_PROFILES_ACTIVE=test
  script:
    - gradle check --info --stacktrace
    - gradle test
    - gradle --stacktrace --info jacocoTestReport sonarqube
    - grep -Eo "Total.*?([0-9]{1,3})%" build/jacocoHtml/index.html
  artifacts:
    when: always
    reports:
      junit: build/test-results/test/**/TEST-*.xml
  coverage: '/Total.*?([0-9]{1,3})%/'


SonarQube:
  stage: analyze
  image: gradle:jdk17-alpine
  services:
    - "postgres:latest"
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  dependencies:
    - Test
  before_script:
    - echo `pwd`
    - chmod +x ./gradlew
  script:
    - ./gradlew sonarqube --stacktrace --info -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_LOGIN_TOKEN
  allow_failure: true
  only:
    - main
    - post-sprint-revision
    - ci/sonar


Publish:
 stage: publish
 image: docker:latest
 services:
   - docker:dind
 dependencies:
   - Build
 before_script:
   - echo $DOCKER_PASSWORD| docker login -u $REGISTRY_USER --password-stdin docker.io
 script:
   - ls
   - docker build --build-arg PRODUCTION=$PRODUCTION --build-arg JDBC_DATABASE_PASSWORD=$JDBC_DATABASE_PASSWORD --build-arg JDBC_DATABASE_USERNAME=$JDBC_DATABASE_USERNAME --build-arg JDBC_DATABASE_URL_PRODUCTION=$JDBC_DATABASE_URL_PRODUCTION --build-arg API_KEY=$API_KEY --build-arg AUTH_SERVICE_BASE_URL=$AUTH_SERVICE_BASE_URL -t $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG .
   - docker push $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG
 tags:
   - dind 
 only:
   - main




Deploy:
 stage: deploy
 image: alpine:latest
 before_script:
   - chmod 400 $SSH_KEY
   - apk update && apk add openssh-client
 script:
   - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $GCP_USERNAME@$GCP_STATIC_IP "
     docker container rm -f $CONTAINER_NAME || true &&
     docker image rm -f $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG || true &&
     docker run --name $CONTAINER_NAME -d -p 8080:8080 $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG"
 only:
   - main
